{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FlowContext } from \"./flowProvider\";\n\nconst useFlowControls = () => {\n  _s();\n\n  const history = useHistory();\n  const {\n    currentScreen,\n    setCurrentScreen,\n    totalScreens\n  } = useContext(FlowContext);\n\n  const nextScreen = () => {\n    if (currentScreen < totalScreens - 1) {\n      setCurrentScreen(currentScreen + 1);\n      history.push(`/screen-${currentScreen + 1}`);\n    }\n  };\n\n  const prevScreen = () => {\n    if (currentScreen > 0) {\n      setCurrentScreen(currentScreen - 1);\n      history.push(`/screen-${currentScreen - 1}`);\n    }\n  };\n\n  return [nextScreen, prevScreen];\n};\n\n_s(useFlowControls, \"2f25oQBmcwi35PrC5avRiUkDRhI=\", false, function () {\n  return [useHistory];\n});\n\nexport default useFlowControls;","map":{"version":3,"sources":["/Users/yordanlasonov/Documents/GitHub/memory-wizzard-router/src/components/useFlowControls.js"],"names":["useContext","useHistory","FlowContext","useFlowControls","history","currentScreen","setCurrentScreen","totalScreens","nextScreen","push","prevScreen"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAMC,OAAO,GAAGH,UAAU,EAA1B;AACA,QAAM;AAAEI,IAAAA,aAAF;AAAiBC,IAAAA,gBAAjB;AAAmCC,IAAAA;AAAnC,MACJP,UAAU,CAACE,WAAD,CADZ;;AAGA,QAAMM,UAAU,GAAG,MAAM;AACvB,QAAIH,aAAa,GAAGE,YAAY,GAAG,CAAnC,EAAsC;AACpCD,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACAD,MAAAA,OAAO,CAACK,IAAR,CAAc,WAAUJ,aAAa,GAAG,CAAE,EAA1C;AACD;AACF,GALD;;AAOA,QAAMK,UAAU,GAAG,MAAM;AACvB,QAAIL,aAAa,GAAG,CAApB,EAAuB;AACrBC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACAD,MAAAA,OAAO,CAACK,IAAR,CAAc,WAAUJ,aAAa,GAAG,CAAE,EAA1C;AACD;AACF,GALD;;AAOA,SAAO,CAACG,UAAD,EAAaE,UAAb,CAAP;AACD,CApBD;;GAAMP,e;UACYF,U;;;AAqBlB,eAAeE,eAAf","sourcesContent":["import { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FlowContext } from \"./flowProvider\";\n\nconst useFlowControls = () => {\n  const history = useHistory();\n  const { currentScreen, setCurrentScreen, totalScreens } =\n    useContext(FlowContext);\n\n  const nextScreen = () => {\n    if (currentScreen < totalScreens - 1) {\n      setCurrentScreen(currentScreen + 1);\n      history.push(`/screen-${currentScreen + 1}`);\n    }\n  };\n\n  const prevScreen = () => {\n    if (currentScreen > 0) {\n      setCurrentScreen(currentScreen - 1);\n      history.push(`/screen-${currentScreen - 1}`);\n    }\n  };\n\n  return [nextScreen, prevScreen];\n};\n\nexport default useFlowControls;\n"]},"metadata":{},"sourceType":"module"}